extends layout

block content
  h1= title
  #brews
    - each brew in brews
      include includes/brew-single

  script(src='/socket.io/socket.io.js')
  script
    function calculateOpacity(time) {
      // returns diff in milliseconds
      var diff = moment().diff(moment(time));
      // scale according to how old; older than 2h gets minimum 10% opacity
      var maxAge = 1000 * 60 * 60 * 2;
      var ratio = (maxAge - diff) / maxAge;
      ratio = ratio < 0.0 ? 0.0 : ratio;
      if(isNaN(ratio) || ratio > 1.0) {
        return 1.0;
      }
      return (0.8 * ratio) + 0.2;
    }
    function setOpacity(ele) {
      var unixTime = parseInt($(ele).data('created'));
      $(ele).css('opacity', calculateOpacity(unixTime));
    }
    function refreshBrews() {
      $('.brew').each(function(idx, ele) {
        setOpacity(ele);
        var unixTime = parseInt($(ele).data('created'));
        $(ele).find('.relative-time').html(moment(unixTime).fromNow());
      });
    }

    var socket = io.connect();
    socket.on('recentBrews', function(data) {
      $('#brews').html(data);
      refreshBrews();
    });
    socket.on('updateBrew', function(data) {
      var parsed = $.parseHTML(data);
      var id = $(parsed).attr('id');
      var found = $('#' + id);
      if(found.length) {
        found.replaceWith(data);
        setOpacity('#' + id);
      } else {
        $(parsed).hide();
        $('#brews').prepend(parsed);
        var ele = $('#' + id);
        var unixTime = parseInt($(ele).data('created'));
        ele.fadeTo(1500, calculateOpacity(unixTime));
      }
    });
    socket.on('deleteBrew', function(data) {
      var brew = $('#brew-' + data);
      brew.fadeOut(1000, function() { brew.remove() });
    });

    socket.emit('recentBrews');
    window.setInterval(refreshBrews, 30000);
